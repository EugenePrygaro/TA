const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const router = express.Router();
const SECRET_KEY = "35242"; // üîí –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –±–µ–∑–ø–µ—á–Ω–∏–π —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á

// üìå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.post("/register", async (req, res) => {
  try {
    const { nickname, email, password } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î" });
    }

    // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const newUser = await User.create({
      nickname,
      email,
      password: hashedPassword,
    });

    res.status(201).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ", user: newUser });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: error.message });
  }
});

// üìå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log("üì• –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –ª–æ–≥—ñ–Ω:", { email, password });

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const user = await User.findOne({ where: { email } });

    if (!user) {
      console.log("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!");
      return res.status(401).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å" });
    }

    console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:", user.email);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      console.log("‚ùå –ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!");
      return res.status(401).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å" });
    }

    console.log("üõ† –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω...");
    const token = jwt.sign({ id: user.id, email: user.email }, SECRET_KEY, {
      expiresIn: "1h", // –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞
    });

    console.log("üìå –£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω! –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –Ω–∞ —Ñ—Ä–æ–Ω—Ç...");

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ `token` —Ç–∞ `user`
    res.json({
      message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞",
      token,
      user: {
        id: user.id,
        email: user.email,
        nickname: user.nickname, // –î–æ–¥–∞—î–º–æ –Ω—ñ–∫–Ω–µ–π–º
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      }
    });

  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: error.message });
  }
});


module.exports = router;
